digraph {
	compound = "true"
	newrank = "true"
	subgraph "root" {
		"[root] module.ecs_cluster.module.ecs.aws_ecs_cluster.main" [label = "module.ecs_cluster.module.ecs.aws_ecs_cluster.main", shape = "box"]
		"[root] module.ecs_cluster.module.ecs.provider.aws" [label = "module.ecs_cluster.module.ecs.provider.aws", shape = "diamond"]
		"[root] module.ecs_cluster.module.ecs_instances.aws_autoscaling_group.ecs_cluster" [label = "module.ecs_cluster.module.ecs_instances.aws_autoscaling_group.ecs_cluster", shape = "box"]
		"[root] module.ecs_cluster.module.ecs_instances.aws_launch_configuration.ecs_instance" [label = "module.ecs_cluster.module.ecs_instances.aws_launch_configuration.ecs_instance", shape = "box"]
		"[root] module.ecs_cluster.module.ecs_instances.data.template_file.user_data" [label = "module.ecs_cluster.module.ecs_instances.data.template_file.user_data", shape = "box"]
		"[root] module.ecs_cluster.module.ecs_instances.provider.aws" [label = "module.ecs_cluster.module.ecs_instances.provider.aws", shape = "diamond"]
		"[root] module.ecs_cluster.module.ecs_instances.provider.template" [label = "module.ecs_cluster.module.ecs_instances.provider.template", shape = "diamond"]
		"[root] module.ecs_cluster.module.efs.aws_efs_file_system.main" [label = "module.ecs_cluster.module.efs.aws_efs_file_system.main", shape = "box"]
		"[root] module.ecs_cluster.module.efs.aws_efs_mount_target.main" [label = "module.ecs_cluster.module.efs.aws_efs_mount_target.main", shape = "box"]
		"[root] module.ecs_cluster.module.efs.provider.aws" [label = "module.ecs_cluster.module.efs.provider.aws", shape = "diamond"]
		"[root] module.ecs_cluster.module.iam_ecs_instances_profile.aws_iam_instance_profile.main" [label = "module.ecs_cluster.module.iam_ecs_instances_profile.aws_iam_instance_profile.main", shape = "box"]
		"[root] module.ecs_cluster.module.iam_ecs_instances_profile.provider.aws" [label = "module.ecs_cluster.module.iam_ecs_instances_profile.provider.aws", shape = "diamond"]
		"[root] module.ecs_cluster.module.iam_ecs_instances_role.aws_iam_role.main" [label = "module.ecs_cluster.module.iam_ecs_instances_role.aws_iam_role.main", shape = "box"]
		"[root] module.ecs_cluster.module.iam_ecs_instances_role.provider.aws" [label = "module.ecs_cluster.module.iam_ecs_instances_role.provider.aws", shape = "diamond"]
		"[root] module.ecs_cluster.module.iam_ecs_instances_role_policy.aws_iam_role_policy.main" [label = "module.ecs_cluster.module.iam_ecs_instances_role_policy.aws_iam_role_policy.main", shape = "box"]
		"[root] module.ecs_cluster.module.iam_ecs_instances_role_policy.provider.aws" [label = "module.ecs_cluster.module.iam_ecs_instances_role_policy.provider.aws", shape = "diamond"]
		"[root] module.ecs_cluster.module.iam_ecs_service_role.aws_iam_role.main" [label = "module.ecs_cluster.module.iam_ecs_service_role.aws_iam_role.main", shape = "box"]
		"[root] module.ecs_cluster.module.iam_ecs_service_role.provider.aws" [label = "module.ecs_cluster.module.iam_ecs_service_role.provider.aws", shape = "diamond"]
		"[root] module.ecs_cluster.module.iam_ecs_services_role_policy.aws_iam_role_policy.main" [label = "module.ecs_cluster.module.iam_ecs_services_role_policy.aws_iam_role_policy.main", shape = "box"]
		"[root] module.ecs_cluster.module.iam_ecs_services_role_policy.provider.aws" [label = "module.ecs_cluster.module.iam_ecs_services_role_policy.provider.aws", shape = "diamond"]
		"[root] module.ecs_cluster.provider.aws (disabled)" [label = "module.ecs_cluster.provider.aws", shape = "diamond"]
		"[root] module.ecs_cluster.provider.template (disabled)" [label = "module.ecs_cluster.provider.template", shape = "diamond"]
		"[root] module.ecs_registry.aws_ecr_repository.main" [label = "module.ecs_registry.aws_ecr_repository.main", shape = "box"]
		"[root] module.ecs_registry.provider.aws" [label = "module.ecs_registry.provider.aws", shape = "diamond"]
		"[root] module.elb.aws_elb.main" [label = "module.elb.aws_elb.main", shape = "box"]
		"[root] module.elb.provider.aws" [label = "module.elb.provider.aws", shape = "diamond"]
		"[root] module.private_subnet_az1.aws_eip.nat_gateway_ip" [label = "module.private_subnet_az1.aws_eip.nat_gateway_ip", shape = "box"]
		"[root] module.private_subnet_az1.aws_nat_gateway.nat_gateway" [label = "module.private_subnet_az1.aws_nat_gateway.nat_gateway", shape = "box"]
		"[root] module.private_subnet_az1.aws_route_table.route_table" [label = "module.private_subnet_az1.aws_route_table.route_table", shape = "box"]
		"[root] module.private_subnet_az1.aws_route_table.route_table_main_gateway" [label = "module.private_subnet_az1.aws_route_table.route_table_main_gateway", shape = "box"]
		"[root] module.private_subnet_az1.aws_route_table_association.route_table_association" [label = "module.private_subnet_az1.aws_route_table_association.route_table_association", shape = "box"]
		"[root] module.private_subnet_az1.aws_route_table_association.route_table_association_main_gateway" [label = "module.private_subnet_az1.aws_route_table_association.route_table_association_main_gateway", shape = "box"]
		"[root] module.private_subnet_az1.aws_subnet.subnet" [label = "module.private_subnet_az1.aws_subnet.subnet", shape = "box"]
		"[root] module.private_subnet_az1.provider.aws" [label = "module.private_subnet_az1.provider.aws", shape = "diamond"]
		"[root] module.private_subnet_az2.aws_eip.nat_gateway_ip" [label = "module.private_subnet_az2.aws_eip.nat_gateway_ip", shape = "box"]
		"[root] module.private_subnet_az2.aws_nat_gateway.nat_gateway" [label = "module.private_subnet_az2.aws_nat_gateway.nat_gateway", shape = "box"]
		"[root] module.private_subnet_az2.aws_route_table.route_table" [label = "module.private_subnet_az2.aws_route_table.route_table", shape = "box"]
		"[root] module.private_subnet_az2.aws_route_table.route_table_main_gateway" [label = "module.private_subnet_az2.aws_route_table.route_table_main_gateway", shape = "box"]
		"[root] module.private_subnet_az2.aws_route_table_association.route_table_association" [label = "module.private_subnet_az2.aws_route_table_association.route_table_association", shape = "box"]
		"[root] module.private_subnet_az2.aws_route_table_association.route_table_association_main_gateway" [label = "module.private_subnet_az2.aws_route_table_association.route_table_association_main_gateway", shape = "box"]
		"[root] module.private_subnet_az2.aws_subnet.subnet" [label = "module.private_subnet_az2.aws_subnet.subnet", shape = "box"]
		"[root] module.private_subnet_az2.provider.aws" [label = "module.private_subnet_az2.provider.aws", shape = "diamond"]
		"[root] module.private_subnet_az3.aws_eip.nat_gateway_ip" [label = "module.private_subnet_az3.aws_eip.nat_gateway_ip", shape = "box"]
		"[root] module.private_subnet_az3.aws_nat_gateway.nat_gateway" [label = "module.private_subnet_az3.aws_nat_gateway.nat_gateway", shape = "box"]
		"[root] module.private_subnet_az3.aws_route_table.route_table" [label = "module.private_subnet_az3.aws_route_table.route_table", shape = "box"]
		"[root] module.private_subnet_az3.aws_route_table.route_table_main_gateway" [label = "module.private_subnet_az3.aws_route_table.route_table_main_gateway", shape = "box"]
		"[root] module.private_subnet_az3.aws_route_table_association.route_table_association" [label = "module.private_subnet_az3.aws_route_table_association.route_table_association", shape = "box"]
		"[root] module.private_subnet_az3.aws_route_table_association.route_table_association_main_gateway" [label = "module.private_subnet_az3.aws_route_table_association.route_table_association_main_gateway", shape = "box"]
		"[root] module.private_subnet_az3.aws_subnet.subnet" [label = "module.private_subnet_az3.aws_subnet.subnet", shape = "box"]
		"[root] module.private_subnet_az3.provider.aws" [label = "module.private_subnet_az3.provider.aws", shape = "diamond"]
		"[root] module.public_subnet_az1.aws_eip.nat_gateway_ip" [label = "module.public_subnet_az1.aws_eip.nat_gateway_ip", shape = "box"]
		"[root] module.public_subnet_az1.aws_nat_gateway.nat_gateway" [label = "module.public_subnet_az1.aws_nat_gateway.nat_gateway", shape = "box"]
		"[root] module.public_subnet_az1.aws_route_table.route_table" [label = "module.public_subnet_az1.aws_route_table.route_table", shape = "box"]
		"[root] module.public_subnet_az1.aws_route_table.route_table_main_gateway" [label = "module.public_subnet_az1.aws_route_table.route_table_main_gateway", shape = "box"]
		"[root] module.public_subnet_az1.aws_route_table_association.route_table_association" [label = "module.public_subnet_az1.aws_route_table_association.route_table_association", shape = "box"]
		"[root] module.public_subnet_az1.aws_route_table_association.route_table_association_main_gateway" [label = "module.public_subnet_az1.aws_route_table_association.route_table_association_main_gateway", shape = "box"]
		"[root] module.public_subnet_az1.aws_subnet.subnet" [label = "module.public_subnet_az1.aws_subnet.subnet", shape = "box"]
		"[root] module.public_subnet_az1.provider.aws" [label = "module.public_subnet_az1.provider.aws", shape = "diamond"]
		"[root] module.public_subnet_az2.aws_eip.nat_gateway_ip" [label = "module.public_subnet_az2.aws_eip.nat_gateway_ip", shape = "box"]
		"[root] module.public_subnet_az2.aws_nat_gateway.nat_gateway" [label = "module.public_subnet_az2.aws_nat_gateway.nat_gateway", shape = "box"]
		"[root] module.public_subnet_az2.aws_route_table.route_table" [label = "module.public_subnet_az2.aws_route_table.route_table", shape = "box"]
		"[root] module.public_subnet_az2.aws_route_table.route_table_main_gateway" [label = "module.public_subnet_az2.aws_route_table.route_table_main_gateway", shape = "box"]
		"[root] module.public_subnet_az2.aws_route_table_association.route_table_association" [label = "module.public_subnet_az2.aws_route_table_association.route_table_association", shape = "box"]
		"[root] module.public_subnet_az2.aws_route_table_association.route_table_association_main_gateway" [label = "module.public_subnet_az2.aws_route_table_association.route_table_association_main_gateway", shape = "box"]
		"[root] module.public_subnet_az2.aws_subnet.subnet" [label = "module.public_subnet_az2.aws_subnet.subnet", shape = "box"]
		"[root] module.public_subnet_az2.provider.aws" [label = "module.public_subnet_az2.provider.aws", shape = "diamond"]
		"[root] module.public_subnet_az3.aws_eip.nat_gateway_ip" [label = "module.public_subnet_az3.aws_eip.nat_gateway_ip", shape = "box"]
		"[root] module.public_subnet_az3.aws_nat_gateway.nat_gateway" [label = "module.public_subnet_az3.aws_nat_gateway.nat_gateway", shape = "box"]
		"[root] module.public_subnet_az3.aws_route_table.route_table" [label = "module.public_subnet_az3.aws_route_table.route_table", shape = "box"]
		"[root] module.public_subnet_az3.aws_route_table.route_table_main_gateway" [label = "module.public_subnet_az3.aws_route_table.route_table_main_gateway", shape = "box"]
		"[root] module.public_subnet_az3.aws_route_table_association.route_table_association" [label = "module.public_subnet_az3.aws_route_table_association.route_table_association", shape = "box"]
		"[root] module.public_subnet_az3.aws_route_table_association.route_table_association_main_gateway" [label = "module.public_subnet_az3.aws_route_table_association.route_table_association_main_gateway", shape = "box"]
		"[root] module.public_subnet_az3.aws_subnet.subnet" [label = "module.public_subnet_az3.aws_subnet.subnet", shape = "box"]
		"[root] module.public_subnet_az3.provider.aws" [label = "module.public_subnet_az3.provider.aws", shape = "diamond"]
		"[root] module.security_group_ecs_group_egress_rule_allow_all.aws_security_group_rule.main" [label = "module.security_group_ecs_group_egress_rule_allow_all.aws_security_group_rule.main", shape = "box"]
		"[root] module.security_group_ecs_group_egress_rule_allow_all.provider.aws" [label = "module.security_group_ecs_group_egress_rule_allow_all.provider.aws", shape = "diamond"]
		"[root] module.security_group_ecs_group_rule_allow_22.aws_security_group_rule.main" [label = "module.security_group_ecs_group_rule_allow_22.aws_security_group_rule.main", shape = "box"]
		"[root] module.security_group_ecs_group_rule_allow_22.provider.aws" [label = "module.security_group_ecs_group_rule_allow_22.provider.aws", shape = "diamond"]
		"[root] module.security_group_ecs_group_rule_allow_80.aws_security_group_rule.main" [label = "module.security_group_ecs_group_rule_allow_80.aws_security_group_rule.main", shape = "box"]
		"[root] module.security_group_ecs_group_rule_allow_80.provider.aws" [label = "module.security_group_ecs_group_rule_allow_80.provider.aws", shape = "diamond"]
		"[root] module.security_group_ecs_instances.aws_security_group.main" [label = "module.security_group_ecs_instances.aws_security_group.main", shape = "box"]
		"[root] module.security_group_ecs_instances.provider.aws" [label = "module.security_group_ecs_instances.provider.aws", shape = "diamond"]
		"[root] module.security_group_efs.aws_security_group.main" [label = "module.security_group_efs.aws_security_group.main", shape = "box"]
		"[root] module.security_group_efs.provider.aws" [label = "module.security_group_efs.provider.aws", shape = "diamond"]
		"[root] module.security_group_efs_group_rule_allow_2049.aws_security_group_rule.main" [label = "module.security_group_efs_group_rule_allow_2049.aws_security_group_rule.main", shape = "box"]
		"[root] module.security_group_efs_group_rule_allow_2049.provider.aws" [label = "module.security_group_efs_group_rule_allow_2049.provider.aws", shape = "diamond"]
		"[root] module.security_group_elb.aws_security_group.main" [label = "module.security_group_elb.aws_security_group.main", shape = "box"]
		"[root] module.security_group_elb.provider.aws" [label = "module.security_group_elb.provider.aws", shape = "diamond"]
		"[root] module.security_group_elb_group_rule_allow_80.aws_security_group_rule.main" [label = "module.security_group_elb_group_rule_allow_80.aws_security_group_rule.main", shape = "box"]
		"[root] module.security_group_elb_group_rule_allow_80.provider.aws" [label = "module.security_group_elb_group_rule_allow_80.provider.aws", shape = "diamond"]
		"[root] module.security_group_elb_group_rule_egress.aws_security_group_rule.main" [label = "module.security_group_elb_group_rule_egress.aws_security_group_rule.main", shape = "box"]
		"[root] module.security_group_elb_group_rule_egress.provider.aws" [label = "module.security_group_elb_group_rule_egress.provider.aws", shape = "diamond"]
		"[root] module.vpc.aws_internet_gateway.main" [label = "module.vpc.aws_internet_gateway.main", shape = "box"]
		"[root] module.vpc.aws_vpc.main" [label = "module.vpc.aws_vpc.main", shape = "box"]
		"[root] module.vpc.provider.aws" [label = "module.vpc.provider.aws", shape = "diamond"]
		"[root] module.wordpress_rds.aws_db_instance.rds" [label = "module.wordpress_rds.aws_db_instance.rds", shape = "box"]
		"[root] module.wordpress_rds.aws_db_subnet_group.rds" [label = "module.wordpress_rds.aws_db_subnet_group.rds", shape = "box"]
		"[root] module.wordpress_rds.aws_security_group.rds" [label = "module.wordpress_rds.aws_security_group.rds", shape = "box"]
		"[root] module.wordpress_rds.provider.aws" [label = "module.wordpress_rds.provider.aws", shape = "diamond"]
		"[root] module.wordpress_service.aws_ecs_service.main" [label = "module.wordpress_service.aws_ecs_service.main", shape = "box"]
		"[root] module.wordpress_service.aws_ecs_task_definition.wordpress" [label = "module.wordpress_service.aws_ecs_task_definition.wordpress", shape = "box"]
		"[root] module.wordpress_service.data.template_file.wordpress_task" [label = "module.wordpress_service.data.template_file.wordpress_task", shape = "box"]
		"[root] module.wordpress_service.provider.aws" [label = "module.wordpress_service.provider.aws", shape = "diamond"]
		"[root] module.wordpress_service.provider.template" [label = "module.wordpress_service.provider.template", shape = "diamond"]
		"[root] provider.aws (disabled)" [label = "provider.aws", shape = "diamond"]
		"[root] provider.template (disabled)" [label = "provider.template", shape = "diamond"]
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.ecs_cluster.module.ecs_instances.aws_autoscaling_group.ecs_cluster"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.ecs_cluster.module.efs.aws_efs_mount_target.main"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.ecs_cluster.module.iam_ecs_instances_profile.output.name"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.ecs_cluster.module.iam_ecs_instances_role.output.arn"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.ecs_cluster.module.iam_ecs_instances_role.output.name"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.ecs_cluster.module.iam_ecs_instances_role_policy.output.id"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.ecs_cluster.module.iam_ecs_instances_role_policy.output.name"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.ecs_cluster.module.iam_ecs_service_role.output.name"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.ecs_cluster.module.iam_ecs_services_role_policy.output.id"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.ecs_cluster.module.iam_ecs_services_role_policy.output.name"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.ecs_cluster.output.ecs_service_role_id"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.ecs_registry.output.arn"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.ecs_registry.output.id"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.elb.output.elb_id"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.elb.output.elb_zone_id"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.private_subnet_az1.aws_route_table_association.route_table_association"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.private_subnet_az1.aws_route_table_association.route_table_association_main_gateway"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.private_subnet_az2.aws_route_table_association.route_table_association"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.private_subnet_az2.aws_route_table_association.route_table_association_main_gateway"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.private_subnet_az3.aws_route_table_association.route_table_association"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.private_subnet_az3.aws_route_table_association.route_table_association_main_gateway"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.public_subnet_az1.aws_route_table_association.route_table_association"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.public_subnet_az1.aws_route_table_association.route_table_association_main_gateway"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.public_subnet_az2.aws_route_table_association.route_table_association"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.public_subnet_az2.aws_route_table_association.route_table_association_main_gateway"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.public_subnet_az3.aws_route_table_association.route_table_association"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.public_subnet_az3.aws_route_table_association.route_table_association_main_gateway"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.security_group_ecs_group_egress_rule_allow_all.aws_security_group_rule.main"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.security_group_ecs_group_rule_allow_22.aws_security_group_rule.main"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.security_group_ecs_group_rule_allow_80.aws_security_group_rule.main"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.security_group_efs_group_rule_allow_2049.aws_security_group_rule.main"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.security_group_elb_group_rule_allow_80.aws_security_group_rule.main"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.security_group_elb_group_rule_egress.aws_security_group_rule.main"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.vpc.output.aws_vpc_cidr_block"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.wordpress_rds.output.db_instance_id"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.wordpress_rds.output.db_security_group"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.wordpress_rds.output.subnet_group"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] module.wordpress_service.aws_ecs_service.main"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] output.ecr_repository"
		"[root] meta.count-boundary (count boundary fixup)" -> "[root] output.elb_dns"
		"[root] module.ecs_cluster.module.ecs.aws_ecs_cluster.main" -> "[root] module.ecs_cluster.module.ecs.provider.aws"
		"[root] module.ecs_cluster.module.ecs.aws_ecs_cluster.main" -> "[root] module.ecs_cluster.module.ecs.var.name"
		"[root] module.ecs_cluster.module.ecs.output.aws_ecs_cluster_main_id" -> "[root] module.ecs_cluster.module.ecs.aws_ecs_cluster.main"
		"[root] module.ecs_cluster.module.ecs.provider.aws" -> "[root] module.ecs_cluster.provider.aws (disabled)"
		"[root] module.ecs_cluster.module.ecs.var.name" -> "[root] module.ecs_cluster.var.ecs_cluster_name"
		"[root] module.ecs_cluster.module.ecs_instances.aws_autoscaling_group.ecs_cluster" -> "[root] module.ecs_cluster.module.ecs_instances.aws_launch_configuration.ecs_instance"
		"[root] module.ecs_cluster.module.ecs_instances.aws_autoscaling_group.ecs_cluster" -> "[root] module.ecs_cluster.module.ecs_instances.var.aws_autoscaling_group_desired_capacity"
		"[root] module.ecs_cluster.module.ecs_instances.aws_autoscaling_group.ecs_cluster" -> "[root] module.ecs_cluster.module.ecs_instances.var.aws_autoscaling_group_health_check_grace_period"
		"[root] module.ecs_cluster.module.ecs_instances.aws_autoscaling_group.ecs_cluster" -> "[root] module.ecs_cluster.module.ecs_instances.var.aws_autoscaling_group_health_check_type"
		"[root] module.ecs_cluster.module.ecs_instances.aws_autoscaling_group.ecs_cluster" -> "[root] module.ecs_cluster.module.ecs_instances.var.aws_autoscaling_group_max_size"
		"[root] module.ecs_cluster.module.ecs_instances.aws_autoscaling_group.ecs_cluster" -> "[root] module.ecs_cluster.module.ecs_instances.var.aws_autoscaling_group_min_size"
		"[root] module.ecs_cluster.module.ecs_instances.aws_autoscaling_group.ecs_cluster" -> "[root] module.ecs_cluster.module.ecs_instances.var.aws_autoscaling_group_name"
		"[root] module.ecs_cluster.module.ecs_instances.aws_autoscaling_group.ecs_cluster" -> "[root] module.ecs_cluster.module.ecs_instances.var.aws_autoscaling_group_subnet_ids"
		"[root] module.ecs_cluster.module.ecs_instances.aws_launch_configuration.ecs_instance" -> "[root] module.ecs_cluster.module.ecs_instances.data.template_file.user_data"
		"[root] module.ecs_cluster.module.ecs_instances.aws_launch_configuration.ecs_instance" -> "[root] module.ecs_cluster.module.ecs_instances.provider.aws"
		"[root] module.ecs_cluster.module.ecs_instances.aws_launch_configuration.ecs_instance" -> "[root] module.ecs_cluster.module.ecs_instances.var.launch_configuration_ami_id"
		"[root] module.ecs_cluster.module.ecs_instances.aws_launch_configuration.ecs_instance" -> "[root] module.ecs_cluster.module.ecs_instances.var.launch_configuration_instance_profile"
		"[root] module.ecs_cluster.module.ecs_instances.aws_launch_configuration.ecs_instance" -> "[root] module.ecs_cluster.module.ecs_instances.var.launch_configuration_instance_type"
		"[root] module.ecs_cluster.module.ecs_instances.aws_launch_configuration.ecs_instance" -> "[root] module.ecs_cluster.module.ecs_instances.var.launch_configuration_prefix_name"
		"[root] module.ecs_cluster.module.ecs_instances.aws_launch_configuration.ecs_instance" -> "[root] module.ecs_cluster.module.ecs_instances.var.launch_configuration_security_groups_ids"
		"[root] module.ecs_cluster.module.ecs_instances.data.template_file.user_data" -> "[root] module.ecs_cluster.module.ecs_instances.provider.template"
		"[root] module.ecs_cluster.module.ecs_instances.data.template_file.user_data" -> "[root] module.ecs_cluster.module.ecs_instances.var.ecs_cluster_name"
		"[root] module.ecs_cluster.module.ecs_instances.data.template_file.user_data" -> "[root] module.ecs_cluster.module.ecs_instances.var.efs_name"
		"[root] module.ecs_cluster.module.ecs_instances.data.template_file.user_data" -> "[root] module.ecs_cluster.module.ecs_instances.var.service_data_dir"
		"[root] module.ecs_cluster.module.ecs_instances.provider.aws" -> "[root] module.ecs_cluster.provider.aws (disabled)"
		"[root] module.ecs_cluster.module.ecs_instances.provider.template" -> "[root] module.ecs_cluster.provider.template (disabled)"
		"[root] module.ecs_cluster.module.ecs_instances.var.aws_autoscaling_group_desired_capacity" -> "[root] module.ecs_cluster.var.ecs_aws_autoscaling_group_desired_capacity"
		"[root] module.ecs_cluster.module.ecs_instances.var.aws_autoscaling_group_max_size" -> "[root] module.ecs_cluster.var.ecs_aws_autoscaling_group_max_size"
		"[root] module.ecs_cluster.module.ecs_instances.var.aws_autoscaling_group_min_size" -> "[root] module.ecs_cluster.var.ecs_aws_autoscaling_group_min_size"
		"[root] module.ecs_cluster.module.ecs_instances.var.aws_autoscaling_group_name" -> "[root] module.ecs_cluster.var.ecs_aws_autoscaling_group_name"
		"[root] module.ecs_cluster.module.ecs_instances.var.aws_autoscaling_group_subnet_ids" -> "[root] module.ecs_cluster.var.ecs_aws_autoscaling_group_subnet_ids"
		"[root] module.ecs_cluster.module.ecs_instances.var.ecs_cluster_name" -> "[root] module.ecs_cluster.var.ecs_cluster_name"
		"[root] module.ecs_cluster.module.ecs_instances.var.efs_name" -> "[root] module.ecs_cluster.var.ecs_efs_name"
		"[root] module.ecs_cluster.module.ecs_instances.var.launch_configuration_ami_id" -> "[root] module.ecs_cluster.var.ecs_launch_configuration_ami_id"
		"[root] module.ecs_cluster.module.ecs_instances.var.launch_configuration_instance_profile" -> "[root] module.ecs_cluster.module.iam_ecs_instances_profile.output.id"
		"[root] module.ecs_cluster.module.ecs_instances.var.launch_configuration_prefix_name" -> "[root] module.ecs_cluster.var.ecs_launch_configuration_prefix_name"
		"[root] module.ecs_cluster.module.ecs_instances.var.launch_configuration_security_groups_ids" -> "[root] module.ecs_cluster.var.ecs_launch_configuration_security_groups_ids"
		"[root] module.ecs_cluster.module.ecs_instances.var.service_data_dir" -> "[root] module.ecs_cluster.var.ecs_service_data_dir"
		"[root] module.ecs_cluster.module.efs.aws_efs_file_system.main" -> "[root] module.ecs_cluster.module.efs.provider.aws"
		"[root] module.ecs_cluster.module.efs.aws_efs_file_system.main" -> "[root] module.ecs_cluster.module.efs.var.creation_token"
		"[root] module.ecs_cluster.module.efs.aws_efs_file_system.main" -> "[root] module.ecs_cluster.module.efs.var.performance_mode"
		"[root] module.ecs_cluster.module.efs.aws_efs_file_system.main" -> "[root] module.ecs_cluster.module.efs.var.tag_name"
		"[root] module.ecs_cluster.module.efs.aws_efs_mount_target.main" -> "[root] module.ecs_cluster.module.efs.aws_efs_file_system.main"
		"[root] module.ecs_cluster.module.efs.aws_efs_mount_target.main" -> "[root] module.ecs_cluster.module.efs.var.security_groups"
		"[root] module.ecs_cluster.module.efs.aws_efs_mount_target.main" -> "[root] module.ecs_cluster.module.efs.var.subnets_count"
		"[root] module.ecs_cluster.module.efs.aws_efs_mount_target.main" -> "[root] module.ecs_cluster.module.efs.var.subnets_ids"
		"[root] module.ecs_cluster.module.efs.provider.aws" -> "[root] module.ecs_cluster.provider.aws (disabled)"
		"[root] module.ecs_cluster.module.efs.var.creation_token" -> "[root] module.ecs_cluster.var.efs_creation_token"
		"[root] module.ecs_cluster.module.efs.var.security_groups" -> "[root] module.ecs_cluster.var.efs_security_groups"
		"[root] module.ecs_cluster.module.efs.var.subnets_count" -> "[root] module.ecs_cluster.var.efs_subnets_count"
		"[root] module.ecs_cluster.module.efs.var.subnets_ids" -> "[root] module.ecs_cluster.var.efs_subnets_ids"
		"[root] module.ecs_cluster.module.efs.var.tag_name" -> "[root] module.ecs_cluster.var.efs_tag_name"
		"[root] module.ecs_cluster.module.iam_ecs_instances_profile.aws_iam_instance_profile.main" -> "[root] module.ecs_cluster.module.iam_ecs_instances_profile.provider.aws"
		"[root] module.ecs_cluster.module.iam_ecs_instances_profile.aws_iam_instance_profile.main" -> "[root] module.ecs_cluster.module.iam_ecs_instances_profile.var.name"
		"[root] module.ecs_cluster.module.iam_ecs_instances_profile.aws_iam_instance_profile.main" -> "[root] module.ecs_cluster.module.iam_ecs_instances_profile.var.role"
		"[root] module.ecs_cluster.module.iam_ecs_instances_profile.output.id" -> "[root] module.ecs_cluster.module.iam_ecs_instances_profile.aws_iam_instance_profile.main"
		"[root] module.ecs_cluster.module.iam_ecs_instances_profile.output.name" -> "[root] module.ecs_cluster.module.iam_ecs_instances_profile.aws_iam_instance_profile.main"
		"[root] module.ecs_cluster.module.iam_ecs_instances_profile.provider.aws" -> "[root] module.ecs_cluster.provider.aws (disabled)"
		"[root] module.ecs_cluster.module.iam_ecs_instances_profile.var.name" -> "[root] module.ecs_cluster.var.ecs_cluster_name"
		"[root] module.ecs_cluster.module.iam_ecs_instances_profile.var.role" -> "[root] module.ecs_cluster.module.iam_ecs_instances_role.output.id"
		"[root] module.ecs_cluster.module.iam_ecs_instances_role.aws_iam_role.main" -> "[root] module.ecs_cluster.module.iam_ecs_instances_role.provider.aws"
		"[root] module.ecs_cluster.module.iam_ecs_instances_role.aws_iam_role.main" -> "[root] module.ecs_cluster.module.iam_ecs_instances_role.var.assume_role_policy"
		"[root] module.ecs_cluster.module.iam_ecs_instances_role.aws_iam_role.main" -> "[root] module.ecs_cluster.module.iam_ecs_instances_role.var.name"
		"[root] module.ecs_cluster.module.iam_ecs_instances_role.output.arn" -> "[root] module.ecs_cluster.module.iam_ecs_instances_role.aws_iam_role.main"
		"[root] module.ecs_cluster.module.iam_ecs_instances_role.output.id" -> "[root] module.ecs_cluster.module.iam_ecs_instances_role.aws_iam_role.main"
		"[root] module.ecs_cluster.module.iam_ecs_instances_role.output.name" -> "[root] module.ecs_cluster.module.iam_ecs_instances_role.aws_iam_role.main"
		"[root] module.ecs_cluster.module.iam_ecs_instances_role.provider.aws" -> "[root] module.ecs_cluster.provider.aws (disabled)"
		"[root] module.ecs_cluster.module.iam_ecs_instances_role.var.name" -> "[root] module.ecs_cluster.var.ecs_cluster_name"
		"[root] module.ecs_cluster.module.iam_ecs_instances_role_policy.aws_iam_role_policy.main" -> "[root] module.ecs_cluster.module.iam_ecs_instances_role_policy.provider.aws"
		"[root] module.ecs_cluster.module.iam_ecs_instances_role_policy.aws_iam_role_policy.main" -> "[root] module.ecs_cluster.module.iam_ecs_instances_role_policy.var.name"
		"[root] module.ecs_cluster.module.iam_ecs_instances_role_policy.aws_iam_role_policy.main" -> "[root] module.ecs_cluster.module.iam_ecs_instances_role_policy.var.policy"
		"[root] module.ecs_cluster.module.iam_ecs_instances_role_policy.aws_iam_role_policy.main" -> "[root] module.ecs_cluster.module.iam_ecs_instances_role_policy.var.role_id"
		"[root] module.ecs_cluster.module.iam_ecs_instances_role_policy.output.id" -> "[root] module.ecs_cluster.module.iam_ecs_instances_role_policy.aws_iam_role_policy.main"
		"[root] module.ecs_cluster.module.iam_ecs_instances_role_policy.output.name" -> "[root] module.ecs_cluster.module.iam_ecs_instances_role_policy.aws_iam_role_policy.main"
		"[root] module.ecs_cluster.module.iam_ecs_instances_role_policy.provider.aws" -> "[root] module.ecs_cluster.provider.aws (disabled)"
		"[root] module.ecs_cluster.module.iam_ecs_instances_role_policy.var.name" -> "[root] module.ecs_cluster.var.ecs_cluster_name"
		"[root] module.ecs_cluster.module.iam_ecs_instances_role_policy.var.role_id" -> "[root] module.ecs_cluster.module.iam_ecs_instances_role.output.id"
		"[root] module.ecs_cluster.module.iam_ecs_service_role.aws_iam_role.main" -> "[root] module.ecs_cluster.module.iam_ecs_service_role.provider.aws"
		"[root] module.ecs_cluster.module.iam_ecs_service_role.aws_iam_role.main" -> "[root] module.ecs_cluster.module.iam_ecs_service_role.var.assume_role_policy"
		"[root] module.ecs_cluster.module.iam_ecs_service_role.aws_iam_role.main" -> "[root] module.ecs_cluster.module.iam_ecs_service_role.var.name"
		"[root] module.ecs_cluster.module.iam_ecs_service_role.output.arn" -> "[root] module.ecs_cluster.module.iam_ecs_service_role.aws_iam_role.main"
		"[root] module.ecs_cluster.module.iam_ecs_service_role.output.id" -> "[root] module.ecs_cluster.module.iam_ecs_service_role.aws_iam_role.main"
		"[root] module.ecs_cluster.module.iam_ecs_service_role.output.name" -> "[root] module.ecs_cluster.module.iam_ecs_service_role.aws_iam_role.main"
		"[root] module.ecs_cluster.module.iam_ecs_service_role.provider.aws" -> "[root] module.ecs_cluster.provider.aws (disabled)"
		"[root] module.ecs_cluster.module.iam_ecs_service_role.var.name" -> "[root] module.ecs_cluster.var.ecs_cluster_name"
		"[root] module.ecs_cluster.module.iam_ecs_services_role_policy.aws_iam_role_policy.main" -> "[root] module.ecs_cluster.module.iam_ecs_services_role_policy.provider.aws"
		"[root] module.ecs_cluster.module.iam_ecs_services_role_policy.aws_iam_role_policy.main" -> "[root] module.ecs_cluster.module.iam_ecs_services_role_policy.var.name"
		"[root] module.ecs_cluster.module.iam_ecs_services_role_policy.aws_iam_role_policy.main" -> "[root] module.ecs_cluster.module.iam_ecs_services_role_policy.var.policy"
		"[root] module.ecs_cluster.module.iam_ecs_services_role_policy.aws_iam_role_policy.main" -> "[root] module.ecs_cluster.module.iam_ecs_services_role_policy.var.role_id"
		"[root] module.ecs_cluster.module.iam_ecs_services_role_policy.output.id" -> "[root] module.ecs_cluster.module.iam_ecs_services_role_policy.aws_iam_role_policy.main"
		"[root] module.ecs_cluster.module.iam_ecs_services_role_policy.output.name" -> "[root] module.ecs_cluster.module.iam_ecs_services_role_policy.aws_iam_role_policy.main"
		"[root] module.ecs_cluster.module.iam_ecs_services_role_policy.provider.aws" -> "[root] module.ecs_cluster.provider.aws (disabled)"
		"[root] module.ecs_cluster.module.iam_ecs_services_role_policy.var.name" -> "[root] module.ecs_cluster.var.ecs_cluster_name"
		"[root] module.ecs_cluster.module.iam_ecs_services_role_policy.var.role_id" -> "[root] module.ecs_cluster.module.iam_ecs_service_role.output.id"
		"[root] module.ecs_cluster.output.ecs_cluster_id" -> "[root] module.ecs_cluster.module.ecs.output.aws_ecs_cluster_main_id"
		"[root] module.ecs_cluster.output.ecs_service_role_arn" -> "[root] module.ecs_cluster.module.iam_ecs_service_role.output.arn"
		"[root] module.ecs_cluster.output.ecs_service_role_id" -> "[root] module.ecs_cluster.module.iam_ecs_service_role.output.id"
		"[root] module.ecs_cluster.provider.aws (disabled)" -> "[root] provider.aws (disabled)"
		"[root] module.ecs_cluster.provider.template (disabled)" -> "[root] provider.template (disabled)"
		"[root] module.ecs_cluster.var.ecs_aws_autoscaling_group_subnet_ids" -> "[root] module.private_subnet_az1.output.aws_subnet_id"
		"[root] module.ecs_cluster.var.ecs_aws_autoscaling_group_subnet_ids" -> "[root] module.private_subnet_az2.output.aws_subnet_id"
		"[root] module.ecs_cluster.var.ecs_aws_autoscaling_group_subnet_ids" -> "[root] module.private_subnet_az3.output.aws_subnet_id"
		"[root] module.ecs_cluster.var.ecs_cluster_name" -> "[root] var.name"
		"[root] module.ecs_cluster.var.ecs_efs_name" -> "[root] var.name"
		"[root] module.ecs_cluster.var.ecs_launch_configuration_prefix_name" -> "[root] var.name"
		"[root] module.ecs_cluster.var.ecs_launch_configuration_security_groups_ids" -> "[root] module.security_group_ecs_instances.output.aws_security_group_id"
		"[root] module.ecs_cluster.var.ecs_launch_configuration_security_groups_ids" -> "[root] module.security_group_efs.output.aws_security_group_id"
		"[root] module.ecs_cluster.var.efs_creation_token" -> "[root] var.name"
		"[root] module.ecs_cluster.var.efs_security_groups" -> "[root] module.security_group_efs.output.aws_security_group_id"
		"[root] module.ecs_cluster.var.efs_subnets_ids" -> "[root] module.private_subnet_az1.output.aws_subnet_id"
		"[root] module.ecs_cluster.var.efs_subnets_ids" -> "[root] module.private_subnet_az2.output.aws_subnet_id"
		"[root] module.ecs_cluster.var.efs_subnets_ids" -> "[root] module.private_subnet_az3.output.aws_subnet_id"
		"[root] module.ecs_cluster.var.efs_tag_name" -> "[root] var.name"
		"[root] module.ecs_registry.aws_ecr_repository.main" -> "[root] module.ecs_registry.provider.aws"
		"[root] module.ecs_registry.aws_ecr_repository.main" -> "[root] module.ecs_registry.var.name"
		"[root] module.ecs_registry.output.arn" -> "[root] module.ecs_registry.aws_ecr_repository.main"
		"[root] module.ecs_registry.output.id" -> "[root] module.ecs_registry.aws_ecr_repository.main"
		"[root] module.ecs_registry.output.url" -> "[root] module.ecs_registry.aws_ecr_repository.main"
		"[root] module.ecs_registry.provider.aws" -> "[root] provider.aws (disabled)"
		"[root] module.elb.aws_elb.main" -> "[root] module.elb.provider.aws"
		"[root] module.elb.aws_elb.main" -> "[root] module.elb.var.name"
		"[root] module.elb.aws_elb.main" -> "[root] module.elb.var.security_group_ids"
		"[root] module.elb.aws_elb.main" -> "[root] module.elb.var.subnet_ids"
		"[root] module.elb.output.elb_dns_name" -> "[root] module.elb.aws_elb.main"
		"[root] module.elb.output.elb_id" -> "[root] module.elb.aws_elb.main"
		"[root] module.elb.output.elb_name" -> "[root] module.elb.aws_elb.main"
		"[root] module.elb.output.elb_zone_id" -> "[root] module.elb.aws_elb.main"
		"[root] module.elb.provider.aws" -> "[root] provider.aws (disabled)"
		"[root] module.elb.var.name" -> "[root] var.name"
		"[root] module.elb.var.security_group_ids" -> "[root] module.security_group_elb.output.aws_security_group_id"
		"[root] module.elb.var.subnet_ids" -> "[root] module.public_subnet_az1.output.aws_subnet_id"
		"[root] module.elb.var.subnet_ids" -> "[root] module.public_subnet_az2.output.aws_subnet_id"
		"[root] module.elb.var.subnet_ids" -> "[root] module.public_subnet_az3.output.aws_subnet_id"
		"[root] module.private_subnet_az1.aws_eip.nat_gateway_ip" -> "[root] module.private_subnet_az1.provider.aws"
		"[root] module.private_subnet_az1.aws_eip.nat_gateway_ip" -> "[root] module.private_subnet_az1.var.create_nat_gateway"
		"[root] module.private_subnet_az1.aws_nat_gateway.nat_gateway" -> "[root] module.private_subnet_az1.aws_eip.nat_gateway_ip"
		"[root] module.private_subnet_az1.aws_nat_gateway.nat_gateway" -> "[root] module.private_subnet_az1.aws_subnet.subnet"
		"[root] module.private_subnet_az1.aws_nat_gateway.nat_gateway" -> "[root] module.private_subnet_az1.var.nat_gateway_subnet_id"
		"[root] module.private_subnet_az1.aws_route_table.route_table" -> "[root] module.private_subnet_az1.aws_nat_gateway.nat_gateway"
		"[root] module.private_subnet_az1.aws_route_table.route_table" -> "[root] module.private_subnet_az1.var.route_table_cidr_block"
		"[root] module.private_subnet_az1.aws_route_table.route_table_main_gateway" -> "[root] module.private_subnet_az1.provider.aws"
		"[root] module.private_subnet_az1.aws_route_table.route_table_main_gateway" -> "[root] module.private_subnet_az1.var.create_nat_gateway"
		"[root] module.private_subnet_az1.aws_route_table.route_table_main_gateway" -> "[root] module.private_subnet_az1.var.route_table_cidr_block"
		"[root] module.private_subnet_az1.aws_route_table.route_table_main_gateway" -> "[root] module.private_subnet_az1.var.route_table_gateway_id"
		"[root] module.private_subnet_az1.aws_route_table.route_table_main_gateway" -> "[root] module.private_subnet_az1.var.tag_name"
		"[root] module.private_subnet_az1.aws_route_table.route_table_main_gateway" -> "[root] module.private_subnet_az1.var.vpc_id"
		"[root] module.private_subnet_az1.aws_route_table_association.route_table_association" -> "[root] module.private_subnet_az1.aws_route_table.route_table"
		"[root] module.private_subnet_az1.aws_route_table_association.route_table_association_main_gateway" -> "[root] module.private_subnet_az1.aws_route_table.route_table_main_gateway"
		"[root] module.private_subnet_az1.aws_route_table_association.route_table_association_main_gateway" -> "[root] module.private_subnet_az1.aws_subnet.subnet"
		"[root] module.private_subnet_az1.aws_subnet.subnet" -> "[root] module.private_subnet_az1.provider.aws"
		"[root] module.private_subnet_az1.aws_subnet.subnet" -> "[root] module.private_subnet_az1.var.map_public_ip_on_launch"
		"[root] module.private_subnet_az1.aws_subnet.subnet" -> "[root] module.private_subnet_az1.var.subnet_cidr"
		"[root] module.private_subnet_az1.aws_subnet.subnet" -> "[root] module.private_subnet_az1.var.subnet_zone"
		"[root] module.private_subnet_az1.aws_subnet.subnet" -> "[root] module.private_subnet_az1.var.tag_name"
		"[root] module.private_subnet_az1.aws_subnet.subnet" -> "[root] module.private_subnet_az1.var.vpc_id"
		"[root] module.private_subnet_az1.output.aws_subnet_cidr_block" -> "[root] module.private_subnet_az1.aws_subnet.subnet"
		"[root] module.private_subnet_az1.output.aws_subnet_id" -> "[root] module.private_subnet_az1.aws_subnet.subnet"
		"[root] module.private_subnet_az1.provider.aws" -> "[root] provider.aws (disabled)"
		"[root] module.private_subnet_az1.var.nat_gateway_subnet_id" -> "[root] module.public_subnet_az1.output.aws_subnet_id"
		"[root] module.private_subnet_az1.var.tag_name" -> "[root] var.name"
		"[root] module.private_subnet_az1.var.vpc_id" -> "[root] module.vpc.output.aws_vpc_id"
		"[root] module.private_subnet_az2.aws_eip.nat_gateway_ip" -> "[root] module.private_subnet_az2.provider.aws"
		"[root] module.private_subnet_az2.aws_eip.nat_gateway_ip" -> "[root] module.private_subnet_az2.var.create_nat_gateway"
		"[root] module.private_subnet_az2.aws_nat_gateway.nat_gateway" -> "[root] module.private_subnet_az2.aws_eip.nat_gateway_ip"
		"[root] module.private_subnet_az2.aws_nat_gateway.nat_gateway" -> "[root] module.private_subnet_az2.aws_subnet.subnet"
		"[root] module.private_subnet_az2.aws_nat_gateway.nat_gateway" -> "[root] module.private_subnet_az2.var.nat_gateway_subnet_id"
		"[root] module.private_subnet_az2.aws_route_table.route_table" -> "[root] module.private_subnet_az2.aws_nat_gateway.nat_gateway"
		"[root] module.private_subnet_az2.aws_route_table.route_table" -> "[root] module.private_subnet_az2.var.route_table_cidr_block"
		"[root] module.private_subnet_az2.aws_route_table.route_table_main_gateway" -> "[root] module.private_subnet_az2.provider.aws"
		"[root] module.private_subnet_az2.aws_route_table.route_table_main_gateway" -> "[root] module.private_subnet_az2.var.create_nat_gateway"
		"[root] module.private_subnet_az2.aws_route_table.route_table_main_gateway" -> "[root] module.private_subnet_az2.var.route_table_cidr_block"
		"[root] module.private_subnet_az2.aws_route_table.route_table_main_gateway" -> "[root] module.private_subnet_az2.var.route_table_gateway_id"
		"[root] module.private_subnet_az2.aws_route_table.route_table_main_gateway" -> "[root] module.private_subnet_az2.var.tag_name"
		"[root] module.private_subnet_az2.aws_route_table.route_table_main_gateway" -> "[root] module.private_subnet_az2.var.vpc_id"
		"[root] module.private_subnet_az2.aws_route_table_association.route_table_association" -> "[root] module.private_subnet_az2.aws_route_table.route_table"
		"[root] module.private_subnet_az2.aws_route_table_association.route_table_association_main_gateway" -> "[root] module.private_subnet_az2.aws_route_table.route_table_main_gateway"
		"[root] module.private_subnet_az2.aws_route_table_association.route_table_association_main_gateway" -> "[root] module.private_subnet_az2.aws_subnet.subnet"
		"[root] module.private_subnet_az2.aws_subnet.subnet" -> "[root] module.private_subnet_az2.provider.aws"
		"[root] module.private_subnet_az2.aws_subnet.subnet" -> "[root] module.private_subnet_az2.var.map_public_ip_on_launch"
		"[root] module.private_subnet_az2.aws_subnet.subnet" -> "[root] module.private_subnet_az2.var.subnet_cidr"
		"[root] module.private_subnet_az2.aws_subnet.subnet" -> "[root] module.private_subnet_az2.var.subnet_zone"
		"[root] module.private_subnet_az2.aws_subnet.subnet" -> "[root] module.private_subnet_az2.var.tag_name"
		"[root] module.private_subnet_az2.aws_subnet.subnet" -> "[root] module.private_subnet_az2.var.vpc_id"
		"[root] module.private_subnet_az2.output.aws_subnet_cidr_block" -> "[root] module.private_subnet_az2.aws_subnet.subnet"
		"[root] module.private_subnet_az2.output.aws_subnet_id" -> "[root] module.private_subnet_az2.aws_subnet.subnet"
		"[root] module.private_subnet_az2.provider.aws" -> "[root] provider.aws (disabled)"
		"[root] module.private_subnet_az2.var.nat_gateway_subnet_id" -> "[root] module.public_subnet_az2.output.aws_subnet_id"
		"[root] module.private_subnet_az2.var.tag_name" -> "[root] var.name"
		"[root] module.private_subnet_az2.var.vpc_id" -> "[root] module.vpc.output.aws_vpc_id"
		"[root] module.private_subnet_az3.aws_eip.nat_gateway_ip" -> "[root] module.private_subnet_az3.provider.aws"
		"[root] module.private_subnet_az3.aws_eip.nat_gateway_ip" -> "[root] module.private_subnet_az3.var.create_nat_gateway"
		"[root] module.private_subnet_az3.aws_nat_gateway.nat_gateway" -> "[root] module.private_subnet_az3.aws_eip.nat_gateway_ip"
		"[root] module.private_subnet_az3.aws_nat_gateway.nat_gateway" -> "[root] module.private_subnet_az3.aws_subnet.subnet"
		"[root] module.private_subnet_az3.aws_nat_gateway.nat_gateway" -> "[root] module.private_subnet_az3.var.nat_gateway_subnet_id"
		"[root] module.private_subnet_az3.aws_route_table.route_table" -> "[root] module.private_subnet_az3.aws_nat_gateway.nat_gateway"
		"[root] module.private_subnet_az3.aws_route_table.route_table" -> "[root] module.private_subnet_az3.var.route_table_cidr_block"
		"[root] module.private_subnet_az3.aws_route_table.route_table_main_gateway" -> "[root] module.private_subnet_az3.provider.aws"
		"[root] module.private_subnet_az3.aws_route_table.route_table_main_gateway" -> "[root] module.private_subnet_az3.var.create_nat_gateway"
		"[root] module.private_subnet_az3.aws_route_table.route_table_main_gateway" -> "[root] module.private_subnet_az3.var.route_table_cidr_block"
		"[root] module.private_subnet_az3.aws_route_table.route_table_main_gateway" -> "[root] module.private_subnet_az3.var.route_table_gateway_id"
		"[root] module.private_subnet_az3.aws_route_table.route_table_main_gateway" -> "[root] module.private_subnet_az3.var.tag_name"
		"[root] module.private_subnet_az3.aws_route_table.route_table_main_gateway" -> "[root] module.private_subnet_az3.var.vpc_id"
		"[root] module.private_subnet_az3.aws_route_table_association.route_table_association" -> "[root] module.private_subnet_az3.aws_route_table.route_table"
		"[root] module.private_subnet_az3.aws_route_table_association.route_table_association_main_gateway" -> "[root] module.private_subnet_az3.aws_route_table.route_table_main_gateway"
		"[root] module.private_subnet_az3.aws_route_table_association.route_table_association_main_gateway" -> "[root] module.private_subnet_az3.aws_subnet.subnet"
		"[root] module.private_subnet_az3.aws_subnet.subnet" -> "[root] module.private_subnet_az3.provider.aws"
		"[root] module.private_subnet_az3.aws_subnet.subnet" -> "[root] module.private_subnet_az3.var.map_public_ip_on_launch"
		"[root] module.private_subnet_az3.aws_subnet.subnet" -> "[root] module.private_subnet_az3.var.subnet_cidr"
		"[root] module.private_subnet_az3.aws_subnet.subnet" -> "[root] module.private_subnet_az3.var.subnet_zone"
		"[root] module.private_subnet_az3.aws_subnet.subnet" -> "[root] module.private_subnet_az3.var.tag_name"
		"[root] module.private_subnet_az3.aws_subnet.subnet" -> "[root] module.private_subnet_az3.var.vpc_id"
		"[root] module.private_subnet_az3.output.aws_subnet_cidr_block" -> "[root] module.private_subnet_az3.aws_subnet.subnet"
		"[root] module.private_subnet_az3.output.aws_subnet_id" -> "[root] module.private_subnet_az3.aws_subnet.subnet"
		"[root] module.private_subnet_az3.provider.aws" -> "[root] provider.aws (disabled)"
		"[root] module.private_subnet_az3.var.nat_gateway_subnet_id" -> "[root] module.public_subnet_az3.output.aws_subnet_id"
		"[root] module.private_subnet_az3.var.tag_name" -> "[root] var.name"
		"[root] module.private_subnet_az3.var.vpc_id" -> "[root] module.vpc.output.aws_vpc_id"
		"[root] module.public_subnet_az1.aws_eip.nat_gateway_ip" -> "[root] module.public_subnet_az1.provider.aws"
		"[root] module.public_subnet_az1.aws_eip.nat_gateway_ip" -> "[root] module.public_subnet_az1.var.create_nat_gateway"
		"[root] module.public_subnet_az1.aws_nat_gateway.nat_gateway" -> "[root] module.public_subnet_az1.aws_eip.nat_gateway_ip"
		"[root] module.public_subnet_az1.aws_nat_gateway.nat_gateway" -> "[root] module.public_subnet_az1.aws_subnet.subnet"
		"[root] module.public_subnet_az1.aws_nat_gateway.nat_gateway" -> "[root] module.public_subnet_az1.var.nat_gateway_subnet_id"
		"[root] module.public_subnet_az1.aws_route_table.route_table" -> "[root] module.public_subnet_az1.aws_nat_gateway.nat_gateway"
		"[root] module.public_subnet_az1.aws_route_table.route_table" -> "[root] module.public_subnet_az1.var.route_table_cidr_block"
		"[root] module.public_subnet_az1.aws_route_table.route_table_main_gateway" -> "[root] module.public_subnet_az1.provider.aws"
		"[root] module.public_subnet_az1.aws_route_table.route_table_main_gateway" -> "[root] module.public_subnet_az1.var.create_nat_gateway"
		"[root] module.public_subnet_az1.aws_route_table.route_table_main_gateway" -> "[root] module.public_subnet_az1.var.route_table_cidr_block"
		"[root] module.public_subnet_az1.aws_route_table.route_table_main_gateway" -> "[root] module.public_subnet_az1.var.route_table_gateway_id"
		"[root] module.public_subnet_az1.aws_route_table.route_table_main_gateway" -> "[root] module.public_subnet_az1.var.tag_name"
		"[root] module.public_subnet_az1.aws_route_table.route_table_main_gateway" -> "[root] module.public_subnet_az1.var.vpc_id"
		"[root] module.public_subnet_az1.aws_route_table_association.route_table_association" -> "[root] module.public_subnet_az1.aws_route_table.route_table"
		"[root] module.public_subnet_az1.aws_route_table_association.route_table_association_main_gateway" -> "[root] module.public_subnet_az1.aws_route_table.route_table_main_gateway"
		"[root] module.public_subnet_az1.aws_route_table_association.route_table_association_main_gateway" -> "[root] module.public_subnet_az1.aws_subnet.subnet"
		"[root] module.public_subnet_az1.aws_subnet.subnet" -> "[root] module.public_subnet_az1.provider.aws"
		"[root] module.public_subnet_az1.aws_subnet.subnet" -> "[root] module.public_subnet_az1.var.map_public_ip_on_launch"
		"[root] module.public_subnet_az1.aws_subnet.subnet" -> "[root] module.public_subnet_az1.var.subnet_cidr"
		"[root] module.public_subnet_az1.aws_subnet.subnet" -> "[root] module.public_subnet_az1.var.subnet_zone"
		"[root] module.public_subnet_az1.aws_subnet.subnet" -> "[root] module.public_subnet_az1.var.tag_name"
		"[root] module.public_subnet_az1.aws_subnet.subnet" -> "[root] module.public_subnet_az1.var.vpc_id"
		"[root] module.public_subnet_az1.output.aws_subnet_cidr_block" -> "[root] module.public_subnet_az1.aws_subnet.subnet"
		"[root] module.public_subnet_az1.output.aws_subnet_id" -> "[root] module.public_subnet_az1.aws_subnet.subnet"
		"[root] module.public_subnet_az1.provider.aws" -> "[root] provider.aws (disabled)"
		"[root] module.public_subnet_az1.var.route_table_gateway_id" -> "[root] module.vpc.output.aws_internet_gateway_id"
		"[root] module.public_subnet_az1.var.tag_name" -> "[root] var.name"
		"[root] module.public_subnet_az1.var.vpc_id" -> "[root] module.vpc.output.aws_vpc_id"
		"[root] module.public_subnet_az2.aws_eip.nat_gateway_ip" -> "[root] module.public_subnet_az2.provider.aws"
		"[root] module.public_subnet_az2.aws_eip.nat_gateway_ip" -> "[root] module.public_subnet_az2.var.create_nat_gateway"
		"[root] module.public_subnet_az2.aws_nat_gateway.nat_gateway" -> "[root] module.public_subnet_az2.aws_eip.nat_gateway_ip"
		"[root] module.public_subnet_az2.aws_nat_gateway.nat_gateway" -> "[root] module.public_subnet_az2.aws_subnet.subnet"
		"[root] module.public_subnet_az2.aws_nat_gateway.nat_gateway" -> "[root] module.public_subnet_az2.var.nat_gateway_subnet_id"
		"[root] module.public_subnet_az2.aws_route_table.route_table" -> "[root] module.public_subnet_az2.aws_nat_gateway.nat_gateway"
		"[root] module.public_subnet_az2.aws_route_table.route_table" -> "[root] module.public_subnet_az2.var.route_table_cidr_block"
		"[root] module.public_subnet_az2.aws_route_table.route_table_main_gateway" -> "[root] module.public_subnet_az2.provider.aws"
		"[root] module.public_subnet_az2.aws_route_table.route_table_main_gateway" -> "[root] module.public_subnet_az2.var.create_nat_gateway"
		"[root] module.public_subnet_az2.aws_route_table.route_table_main_gateway" -> "[root] module.public_subnet_az2.var.route_table_cidr_block"
		"[root] module.public_subnet_az2.aws_route_table.route_table_main_gateway" -> "[root] module.public_subnet_az2.var.route_table_gateway_id"
		"[root] module.public_subnet_az2.aws_route_table.route_table_main_gateway" -> "[root] module.public_subnet_az2.var.tag_name"
		"[root] module.public_subnet_az2.aws_route_table.route_table_main_gateway" -> "[root] module.public_subnet_az2.var.vpc_id"
		"[root] module.public_subnet_az2.aws_route_table_association.route_table_association" -> "[root] module.public_subnet_az2.aws_route_table.route_table"
		"[root] module.public_subnet_az2.aws_route_table_association.route_table_association_main_gateway" -> "[root] module.public_subnet_az2.aws_route_table.route_table_main_gateway"
		"[root] module.public_subnet_az2.aws_route_table_association.route_table_association_main_gateway" -> "[root] module.public_subnet_az2.aws_subnet.subnet"
		"[root] module.public_subnet_az2.aws_subnet.subnet" -> "[root] module.public_subnet_az2.provider.aws"
		"[root] module.public_subnet_az2.aws_subnet.subnet" -> "[root] module.public_subnet_az2.var.map_public_ip_on_launch"
		"[root] module.public_subnet_az2.aws_subnet.subnet" -> "[root] module.public_subnet_az2.var.subnet_cidr"
		"[root] module.public_subnet_az2.aws_subnet.subnet" -> "[root] module.public_subnet_az2.var.subnet_zone"
		"[root] module.public_subnet_az2.aws_subnet.subnet" -> "[root] module.public_subnet_az2.var.tag_name"
		"[root] module.public_subnet_az2.aws_subnet.subnet" -> "[root] module.public_subnet_az2.var.vpc_id"
		"[root] module.public_subnet_az2.output.aws_subnet_cidr_block" -> "[root] module.public_subnet_az2.aws_subnet.subnet"
		"[root] module.public_subnet_az2.output.aws_subnet_id" -> "[root] module.public_subnet_az2.aws_subnet.subnet"
		"[root] module.public_subnet_az2.provider.aws" -> "[root] provider.aws (disabled)"
		"[root] module.public_subnet_az2.var.route_table_gateway_id" -> "[root] module.vpc.output.aws_internet_gateway_id"
		"[root] module.public_subnet_az2.var.tag_name" -> "[root] var.name"
		"[root] module.public_subnet_az2.var.vpc_id" -> "[root] module.vpc.output.aws_vpc_id"
		"[root] module.public_subnet_az3.aws_eip.nat_gateway_ip" -> "[root] module.public_subnet_az3.provider.aws"
		"[root] module.public_subnet_az3.aws_eip.nat_gateway_ip" -> "[root] module.public_subnet_az3.var.create_nat_gateway"
		"[root] module.public_subnet_az3.aws_nat_gateway.nat_gateway" -> "[root] module.public_subnet_az3.aws_eip.nat_gateway_ip"
		"[root] module.public_subnet_az3.aws_nat_gateway.nat_gateway" -> "[root] module.public_subnet_az3.aws_subnet.subnet"
		"[root] module.public_subnet_az3.aws_nat_gateway.nat_gateway" -> "[root] module.public_subnet_az3.var.nat_gateway_subnet_id"
		"[root] module.public_subnet_az3.aws_route_table.route_table" -> "[root] module.public_subnet_az3.aws_nat_gateway.nat_gateway"
		"[root] module.public_subnet_az3.aws_route_table.route_table" -> "[root] module.public_subnet_az3.var.route_table_cidr_block"
		"[root] module.public_subnet_az3.aws_route_table.route_table_main_gateway" -> "[root] module.public_subnet_az3.provider.aws"
		"[root] module.public_subnet_az3.aws_route_table.route_table_main_gateway" -> "[root] module.public_subnet_az3.var.create_nat_gateway"
		"[root] module.public_subnet_az3.aws_route_table.route_table_main_gateway" -> "[root] module.public_subnet_az3.var.route_table_cidr_block"
		"[root] module.public_subnet_az3.aws_route_table.route_table_main_gateway" -> "[root] module.public_subnet_az3.var.route_table_gateway_id"
		"[root] module.public_subnet_az3.aws_route_table.route_table_main_gateway" -> "[root] module.public_subnet_az3.var.tag_name"
		"[root] module.public_subnet_az3.aws_route_table.route_table_main_gateway" -> "[root] module.public_subnet_az3.var.vpc_id"
		"[root] module.public_subnet_az3.aws_route_table_association.route_table_association" -> "[root] module.public_subnet_az3.aws_route_table.route_table"
		"[root] module.public_subnet_az3.aws_route_table_association.route_table_association_main_gateway" -> "[root] module.public_subnet_az3.aws_route_table.route_table_main_gateway"
		"[root] module.public_subnet_az3.aws_route_table_association.route_table_association_main_gateway" -> "[root] module.public_subnet_az3.aws_subnet.subnet"
		"[root] module.public_subnet_az3.aws_subnet.subnet" -> "[root] module.public_subnet_az3.provider.aws"
		"[root] module.public_subnet_az3.aws_subnet.subnet" -> "[root] module.public_subnet_az3.var.map_public_ip_on_launch"
		"[root] module.public_subnet_az3.aws_subnet.subnet" -> "[root] module.public_subnet_az3.var.subnet_cidr"
		"[root] module.public_subnet_az3.aws_subnet.subnet" -> "[root] module.public_subnet_az3.var.subnet_zone"
		"[root] module.public_subnet_az3.aws_subnet.subnet" -> "[root] module.public_subnet_az3.var.tag_name"
		"[root] module.public_subnet_az3.aws_subnet.subnet" -> "[root] module.public_subnet_az3.var.vpc_id"
		"[root] module.public_subnet_az3.output.aws_subnet_cidr_block" -> "[root] module.public_subnet_az3.aws_subnet.subnet"
		"[root] module.public_subnet_az3.output.aws_subnet_id" -> "[root] module.public_subnet_az3.aws_subnet.subnet"
		"[root] module.public_subnet_az3.provider.aws" -> "[root] provider.aws (disabled)"
		"[root] module.public_subnet_az3.var.route_table_gateway_id" -> "[root] module.vpc.output.aws_internet_gateway_id"
		"[root] module.public_subnet_az3.var.tag_name" -> "[root] var.name"
		"[root] module.public_subnet_az3.var.vpc_id" -> "[root] module.vpc.output.aws_vpc_id"
		"[root] module.security_group_ecs_group_egress_rule_allow_all.aws_security_group_rule.main" -> "[root] module.security_group_ecs_group_egress_rule_allow_all.provider.aws"
		"[root] module.security_group_ecs_group_egress_rule_allow_all.aws_security_group_rule.main" -> "[root] module.security_group_ecs_group_egress_rule_allow_all.var.cidr_blocks"
		"[root] module.security_group_ecs_group_egress_rule_allow_all.aws_security_group_rule.main" -> "[root] module.security_group_ecs_group_egress_rule_allow_all.var.from_port"
		"[root] module.security_group_ecs_group_egress_rule_allow_all.aws_security_group_rule.main" -> "[root] module.security_group_ecs_group_egress_rule_allow_all.var.protocol"
		"[root] module.security_group_ecs_group_egress_rule_allow_all.aws_security_group_rule.main" -> "[root] module.security_group_ecs_group_egress_rule_allow_all.var.security_group_id"
		"[root] module.security_group_ecs_group_egress_rule_allow_all.aws_security_group_rule.main" -> "[root] module.security_group_ecs_group_egress_rule_allow_all.var.to_port"
		"[root] module.security_group_ecs_group_egress_rule_allow_all.aws_security_group_rule.main" -> "[root] module.security_group_ecs_group_egress_rule_allow_all.var.type"
		"[root] module.security_group_ecs_group_egress_rule_allow_all.provider.aws" -> "[root] provider.aws (disabled)"
		"[root] module.security_group_ecs_group_egress_rule_allow_all.var.security_group_id" -> "[root] module.security_group_ecs_instances.output.aws_security_group_id"
		"[root] module.security_group_ecs_group_rule_allow_22.aws_security_group_rule.main" -> "[root] module.security_group_ecs_group_rule_allow_22.provider.aws"
		"[root] module.security_group_ecs_group_rule_allow_22.aws_security_group_rule.main" -> "[root] module.security_group_ecs_group_rule_allow_22.var.cidr_blocks"
		"[root] module.security_group_ecs_group_rule_allow_22.aws_security_group_rule.main" -> "[root] module.security_group_ecs_group_rule_allow_22.var.from_port"
		"[root] module.security_group_ecs_group_rule_allow_22.aws_security_group_rule.main" -> "[root] module.security_group_ecs_group_rule_allow_22.var.protocol"
		"[root] module.security_group_ecs_group_rule_allow_22.aws_security_group_rule.main" -> "[root] module.security_group_ecs_group_rule_allow_22.var.security_group_id"
		"[root] module.security_group_ecs_group_rule_allow_22.aws_security_group_rule.main" -> "[root] module.security_group_ecs_group_rule_allow_22.var.to_port"
		"[root] module.security_group_ecs_group_rule_allow_22.aws_security_group_rule.main" -> "[root] module.security_group_ecs_group_rule_allow_22.var.type"
		"[root] module.security_group_ecs_group_rule_allow_22.provider.aws" -> "[root] provider.aws (disabled)"
		"[root] module.security_group_ecs_group_rule_allow_22.var.cidr_blocks" -> "[root] module.private_subnet_az1.output.aws_subnet_cidr_block"
		"[root] module.security_group_ecs_group_rule_allow_22.var.cidr_blocks" -> "[root] module.private_subnet_az2.output.aws_subnet_cidr_block"
		"[root] module.security_group_ecs_group_rule_allow_22.var.cidr_blocks" -> "[root] module.private_subnet_az3.output.aws_subnet_cidr_block"
		"[root] module.security_group_ecs_group_rule_allow_22.var.cidr_blocks" -> "[root] module.public_subnet_az1.output.aws_subnet_cidr_block"
		"[root] module.security_group_ecs_group_rule_allow_22.var.cidr_blocks" -> "[root] module.public_subnet_az2.output.aws_subnet_cidr_block"
		"[root] module.security_group_ecs_group_rule_allow_22.var.cidr_blocks" -> "[root] module.public_subnet_az3.output.aws_subnet_cidr_block"
		"[root] module.security_group_ecs_group_rule_allow_22.var.security_group_id" -> "[root] module.security_group_ecs_instances.output.aws_security_group_id"
		"[root] module.security_group_ecs_group_rule_allow_80.aws_security_group_rule.main" -> "[root] module.security_group_ecs_group_rule_allow_80.provider.aws"
		"[root] module.security_group_ecs_group_rule_allow_80.aws_security_group_rule.main" -> "[root] module.security_group_ecs_group_rule_allow_80.var.cidr_blocks"
		"[root] module.security_group_ecs_group_rule_allow_80.aws_security_group_rule.main" -> "[root] module.security_group_ecs_group_rule_allow_80.var.from_port"
		"[root] module.security_group_ecs_group_rule_allow_80.aws_security_group_rule.main" -> "[root] module.security_group_ecs_group_rule_allow_80.var.protocol"
		"[root] module.security_group_ecs_group_rule_allow_80.aws_security_group_rule.main" -> "[root] module.security_group_ecs_group_rule_allow_80.var.security_group_id"
		"[root] module.security_group_ecs_group_rule_allow_80.aws_security_group_rule.main" -> "[root] module.security_group_ecs_group_rule_allow_80.var.to_port"
		"[root] module.security_group_ecs_group_rule_allow_80.aws_security_group_rule.main" -> "[root] module.security_group_ecs_group_rule_allow_80.var.type"
		"[root] module.security_group_ecs_group_rule_allow_80.provider.aws" -> "[root] provider.aws (disabled)"
		"[root] module.security_group_ecs_group_rule_allow_80.var.security_group_id" -> "[root] module.security_group_ecs_instances.output.aws_security_group_id"
		"[root] module.security_group_ecs_instances.aws_security_group.main" -> "[root] module.security_group_ecs_instances.provider.aws"
		"[root] module.security_group_ecs_instances.aws_security_group.main" -> "[root] module.security_group_ecs_instances.var.name"
		"[root] module.security_group_ecs_instances.aws_security_group.main" -> "[root] module.security_group_ecs_instances.var.vpc_id"
		"[root] module.security_group_ecs_instances.output.aws_security_group_id" -> "[root] module.security_group_ecs_instances.aws_security_group.main"
		"[root] module.security_group_ecs_instances.provider.aws" -> "[root] provider.aws (disabled)"
		"[root] module.security_group_ecs_instances.var.name" -> "[root] var.name"
		"[root] module.security_group_ecs_instances.var.vpc_id" -> "[root] module.vpc.output.aws_vpc_id"
		"[root] module.security_group_efs.aws_security_group.main" -> "[root] module.security_group_efs.provider.aws"
		"[root] module.security_group_efs.aws_security_group.main" -> "[root] module.security_group_efs.var.name"
		"[root] module.security_group_efs.aws_security_group.main" -> "[root] module.security_group_efs.var.vpc_id"
		"[root] module.security_group_efs.output.aws_security_group_id" -> "[root] module.security_group_efs.aws_security_group.main"
		"[root] module.security_group_efs.provider.aws" -> "[root] provider.aws (disabled)"
		"[root] module.security_group_efs.var.name" -> "[root] var.name"
		"[root] module.security_group_efs.var.vpc_id" -> "[root] module.vpc.output.aws_vpc_id"
		"[root] module.security_group_efs_group_rule_allow_2049.aws_security_group_rule.main" -> "[root] module.security_group_efs_group_rule_allow_2049.provider.aws"
		"[root] module.security_group_efs_group_rule_allow_2049.aws_security_group_rule.main" -> "[root] module.security_group_efs_group_rule_allow_2049.var.cidr_blocks"
		"[root] module.security_group_efs_group_rule_allow_2049.aws_security_group_rule.main" -> "[root] module.security_group_efs_group_rule_allow_2049.var.from_port"
		"[root] module.security_group_efs_group_rule_allow_2049.aws_security_group_rule.main" -> "[root] module.security_group_efs_group_rule_allow_2049.var.protocol"
		"[root] module.security_group_efs_group_rule_allow_2049.aws_security_group_rule.main" -> "[root] module.security_group_efs_group_rule_allow_2049.var.security_group_id"
		"[root] module.security_group_efs_group_rule_allow_2049.aws_security_group_rule.main" -> "[root] module.security_group_efs_group_rule_allow_2049.var.to_port"
		"[root] module.security_group_efs_group_rule_allow_2049.aws_security_group_rule.main" -> "[root] module.security_group_efs_group_rule_allow_2049.var.type"
		"[root] module.security_group_efs_group_rule_allow_2049.provider.aws" -> "[root] provider.aws (disabled)"
		"[root] module.security_group_efs_group_rule_allow_2049.var.cidr_blocks" -> "[root] module.private_subnet_az1.output.aws_subnet_cidr_block"
		"[root] module.security_group_efs_group_rule_allow_2049.var.cidr_blocks" -> "[root] module.private_subnet_az2.output.aws_subnet_cidr_block"
		"[root] module.security_group_efs_group_rule_allow_2049.var.cidr_blocks" -> "[root] module.private_subnet_az3.output.aws_subnet_cidr_block"
		"[root] module.security_group_efs_group_rule_allow_2049.var.security_group_id" -> "[root] module.security_group_efs.output.aws_security_group_id"
		"[root] module.security_group_elb.aws_security_group.main" -> "[root] module.security_group_elb.provider.aws"
		"[root] module.security_group_elb.aws_security_group.main" -> "[root] module.security_group_elb.var.name"
		"[root] module.security_group_elb.aws_security_group.main" -> "[root] module.security_group_elb.var.vpc_id"
		"[root] module.security_group_elb.output.aws_security_group_id" -> "[root] module.security_group_elb.aws_security_group.main"
		"[root] module.security_group_elb.provider.aws" -> "[root] provider.aws (disabled)"
		"[root] module.security_group_elb.var.name" -> "[root] var.name"
		"[root] module.security_group_elb.var.vpc_id" -> "[root] module.vpc.output.aws_vpc_id"
		"[root] module.security_group_elb_group_rule_allow_80.aws_security_group_rule.main" -> "[root] module.security_group_elb_group_rule_allow_80.provider.aws"
		"[root] module.security_group_elb_group_rule_allow_80.aws_security_group_rule.main" -> "[root] module.security_group_elb_group_rule_allow_80.var.cidr_blocks"
		"[root] module.security_group_elb_group_rule_allow_80.aws_security_group_rule.main" -> "[root] module.security_group_elb_group_rule_allow_80.var.from_port"
		"[root] module.security_group_elb_group_rule_allow_80.aws_security_group_rule.main" -> "[root] module.security_group_elb_group_rule_allow_80.var.protocol"
		"[root] module.security_group_elb_group_rule_allow_80.aws_security_group_rule.main" -> "[root] module.security_group_elb_group_rule_allow_80.var.security_group_id"
		"[root] module.security_group_elb_group_rule_allow_80.aws_security_group_rule.main" -> "[root] module.security_group_elb_group_rule_allow_80.var.to_port"
		"[root] module.security_group_elb_group_rule_allow_80.aws_security_group_rule.main" -> "[root] module.security_group_elb_group_rule_allow_80.var.type"
		"[root] module.security_group_elb_group_rule_allow_80.provider.aws" -> "[root] provider.aws (disabled)"
		"[root] module.security_group_elb_group_rule_allow_80.var.security_group_id" -> "[root] module.security_group_elb.output.aws_security_group_id"
		"[root] module.security_group_elb_group_rule_egress.aws_security_group_rule.main" -> "[root] module.security_group_elb_group_rule_egress.provider.aws"
		"[root] module.security_group_elb_group_rule_egress.aws_security_group_rule.main" -> "[root] module.security_group_elb_group_rule_egress.var.cidr_blocks"
		"[root] module.security_group_elb_group_rule_egress.aws_security_group_rule.main" -> "[root] module.security_group_elb_group_rule_egress.var.from_port"
		"[root] module.security_group_elb_group_rule_egress.aws_security_group_rule.main" -> "[root] module.security_group_elb_group_rule_egress.var.protocol"
		"[root] module.security_group_elb_group_rule_egress.aws_security_group_rule.main" -> "[root] module.security_group_elb_group_rule_egress.var.security_group_id"
		"[root] module.security_group_elb_group_rule_egress.aws_security_group_rule.main" -> "[root] module.security_group_elb_group_rule_egress.var.to_port"
		"[root] module.security_group_elb_group_rule_egress.aws_security_group_rule.main" -> "[root] module.security_group_elb_group_rule_egress.var.type"
		"[root] module.security_group_elb_group_rule_egress.provider.aws" -> "[root] provider.aws (disabled)"
		"[root] module.security_group_elb_group_rule_egress.var.cidr_blocks" -> "[root] module.private_subnet_az1.output.aws_subnet_cidr_block"
		"[root] module.security_group_elb_group_rule_egress.var.cidr_blocks" -> "[root] module.private_subnet_az2.output.aws_subnet_cidr_block"
		"[root] module.security_group_elb_group_rule_egress.var.cidr_blocks" -> "[root] module.private_subnet_az3.output.aws_subnet_cidr_block"
		"[root] module.security_group_elb_group_rule_egress.var.security_group_id" -> "[root] module.security_group_elb.output.aws_security_group_id"
		"[root] module.vpc.aws_internet_gateway.main" -> "[root] module.vpc.aws_vpc.main"
		"[root] module.vpc.aws_vpc.main" -> "[root] module.vpc.provider.aws"
		"[root] module.vpc.aws_vpc.main" -> "[root] module.vpc.var.enable_dns_hostnames"
		"[root] module.vpc.aws_vpc.main" -> "[root] module.vpc.var.tag_name"
		"[root] module.vpc.aws_vpc.main" -> "[root] module.vpc.var.vpc_cidr"
		"[root] module.vpc.output.aws_internet_gateway_id" -> "[root] module.vpc.aws_internet_gateway.main"
		"[root] module.vpc.output.aws_vpc_cidr_block" -> "[root] module.vpc.aws_vpc.main"
		"[root] module.vpc.output.aws_vpc_id" -> "[root] module.vpc.aws_vpc.main"
		"[root] module.vpc.provider.aws" -> "[root] provider.aws (disabled)"
		"[root] module.vpc.var.tag_name" -> "[root] var.name"
		"[root] module.wordpress_rds.aws_db_instance.rds" -> "[root] module.wordpress_rds.aws_db_subnet_group.rds"
		"[root] module.wordpress_rds.aws_db_instance.rds" -> "[root] module.wordpress_rds.aws_security_group.rds"
		"[root] module.wordpress_rds.aws_db_instance.rds" -> "[root] module.wordpress_rds.var.allocated_storage"
		"[root] module.wordpress_rds.aws_db_instance.rds" -> "[root] module.wordpress_rds.var.db_password"
		"[root] module.wordpress_rds.aws_db_instance.rds" -> "[root] module.wordpress_rds.var.db_username"
		"[root] module.wordpress_rds.aws_db_instance.rds" -> "[root] module.wordpress_rds.var.engine"
		"[root] module.wordpress_rds.aws_db_instance.rds" -> "[root] module.wordpress_rds.var.engine_version"
		"[root] module.wordpress_rds.aws_db_instance.rds" -> "[root] module.wordpress_rds.var.identifier"
		"[root] module.wordpress_rds.aws_db_instance.rds" -> "[root] module.wordpress_rds.var.instance_class"
		"[root] module.wordpress_rds.aws_db_instance.rds" -> "[root] module.wordpress_rds.var.parameter_group_name"
		"[root] module.wordpress_rds.aws_db_subnet_group.rds" -> "[root] module.wordpress_rds.provider.aws"
		"[root] module.wordpress_rds.aws_db_subnet_group.rds" -> "[root] module.wordpress_rds.var.db_name"
		"[root] module.wordpress_rds.aws_db_subnet_group.rds" -> "[root] module.wordpress_rds.var.subnet_ids"
		"[root] module.wordpress_rds.aws_security_group.rds" -> "[root] module.wordpress_rds.provider.aws"
		"[root] module.wordpress_rds.aws_security_group.rds" -> "[root] module.wordpress_rds.var.db_name"
		"[root] module.wordpress_rds.aws_security_group.rds" -> "[root] module.wordpress_rds.var.ingress_cidr_blocks"
		"[root] module.wordpress_rds.aws_security_group.rds" -> "[root] module.wordpress_rds.var.ingress_from_port"
		"[root] module.wordpress_rds.aws_security_group.rds" -> "[root] module.wordpress_rds.var.ingress_to_port"
		"[root] module.wordpress_rds.aws_security_group.rds" -> "[root] module.wordpress_rds.var.ingress_to_protocol"
		"[root] module.wordpress_rds.aws_security_group.rds" -> "[root] module.wordpress_rds.var.vpc_id"
		"[root] module.wordpress_rds.output.db_instance_address" -> "[root] module.wordpress_rds.aws_db_instance.rds"
		"[root] module.wordpress_rds.output.db_instance_id" -> "[root] module.wordpress_rds.aws_db_instance.rds"
		"[root] module.wordpress_rds.output.db_security_group" -> "[root] module.wordpress_rds.aws_security_group.rds"
		"[root] module.wordpress_rds.output.subnet_group" -> "[root] module.wordpress_rds.aws_db_subnet_group.rds"
		"[root] module.wordpress_rds.provider.aws" -> "[root] provider.aws (disabled)"
		"[root] module.wordpress_rds.var.ingress_cidr_blocks" -> "[root] module.private_subnet_az1.output.aws_subnet_cidr_block"
		"[root] module.wordpress_rds.var.ingress_cidr_blocks" -> "[root] module.private_subnet_az2.output.aws_subnet_cidr_block"
		"[root] module.wordpress_rds.var.ingress_cidr_blocks" -> "[root] module.private_subnet_az3.output.aws_subnet_cidr_block"
		"[root] module.wordpress_rds.var.subnet_ids" -> "[root] module.private_subnet_az1.output.aws_subnet_id"
		"[root] module.wordpress_rds.var.subnet_ids" -> "[root] module.private_subnet_az2.output.aws_subnet_id"
		"[root] module.wordpress_rds.var.subnet_ids" -> "[root] module.private_subnet_az3.output.aws_subnet_id"
		"[root] module.wordpress_rds.var.vpc_id" -> "[root] module.vpc.output.aws_vpc_id"
		"[root] module.wordpress_service.aws_ecs_service.main" -> "[root] module.wordpress_service.aws_ecs_task_definition.wordpress"
		"[root] module.wordpress_service.aws_ecs_service.main" -> "[root] module.wordpress_service.var.cluster_id"
		"[root] module.wordpress_service.aws_ecs_service.main" -> "[root] module.wordpress_service.var.container_name"
		"[root] module.wordpress_service.aws_ecs_service.main" -> "[root] module.wordpress_service.var.container_port"
		"[root] module.wordpress_service.aws_ecs_service.main" -> "[root] module.wordpress_service.var.desired_count"
		"[root] module.wordpress_service.aws_ecs_service.main" -> "[root] module.wordpress_service.var.elb_name"
		"[root] module.wordpress_service.aws_ecs_service.main" -> "[root] module.wordpress_service.var.iam_role_arn"
		"[root] module.wordpress_service.aws_ecs_service.main" -> "[root] module.wordpress_service.var.minimum_healthy_percent"
		"[root] module.wordpress_service.aws_ecs_service.main" -> "[root] module.wordpress_service.var.name"
		"[root] module.wordpress_service.aws_ecs_task_definition.wordpress" -> "[root] module.wordpress_service.data.template_file.wordpress_task"
		"[root] module.wordpress_service.aws_ecs_task_definition.wordpress" -> "[root] module.wordpress_service.provider.aws"
		"[root] module.wordpress_service.aws_ecs_task_definition.wordpress" -> "[root] module.wordpress_service.var.task_definition_family_name"
		"[root] module.wordpress_service.aws_ecs_task_definition.wordpress" -> "[root] module.wordpress_service.var.task_definition_volume_name"
		"[root] module.wordpress_service.aws_ecs_task_definition.wordpress" -> "[root] module.wordpress_service.var.task_definition_volume_path"
		"[root] module.wordpress_service.data.template_file.wordpress_task" -> "[root] module.wordpress_service.provider.template"
		"[root] module.wordpress_service.data.template_file.wordpress_task" -> "[root] module.wordpress_service.var.service_command"
		"[root] module.wordpress_service.data.template_file.wordpress_task" -> "[root] module.wordpress_service.var.service_container_path"
		"[root] module.wordpress_service.data.template_file.wordpress_task" -> "[root] module.wordpress_service.var.service_container_port"
		"[root] module.wordpress_service.data.template_file.wordpress_task" -> "[root] module.wordpress_service.var.service_cpu"
		"[root] module.wordpress_service.data.template_file.wordpress_task" -> "[root] module.wordpress_service.var.service_essential"
		"[root] module.wordpress_service.data.template_file.wordpress_task" -> "[root] module.wordpress_service.var.service_host_port"
		"[root] module.wordpress_service.data.template_file.wordpress_task" -> "[root] module.wordpress_service.var.service_image_tag"
		"[root] module.wordpress_service.data.template_file.wordpress_task" -> "[root] module.wordpress_service.var.service_memory"
		"[root] module.wordpress_service.data.template_file.wordpress_task" -> "[root] module.wordpress_service.var.service_name"
		"[root] module.wordpress_service.data.template_file.wordpress_task" -> "[root] module.wordpress_service.var.service_protocol"
		"[root] module.wordpress_service.data.template_file.wordpress_task" -> "[root] module.wordpress_service.var.service_repository_url"
		"[root] module.wordpress_service.data.template_file.wordpress_task" -> "[root] module.wordpress_service.var.service_source_volume"
		"[root] module.wordpress_service.data.template_file.wordpress_task" -> "[root] module.wordpress_service.var.wordpress_db_host"
		"[root] module.wordpress_service.data.template_file.wordpress_task" -> "[root] module.wordpress_service.var.wordpress_db_name"
		"[root] module.wordpress_service.data.template_file.wordpress_task" -> "[root] module.wordpress_service.var.wordpress_db_password"
		"[root] module.wordpress_service.data.template_file.wordpress_task" -> "[root] module.wordpress_service.var.wordpress_db_user"
		"[root] module.wordpress_service.provider.aws" -> "[root] provider.aws (disabled)"
		"[root] module.wordpress_service.provider.template" -> "[root] provider.template (disabled)"
		"[root] module.wordpress_service.var.cluster_id" -> "[root] module.ecs_cluster.output.ecs_cluster_id"
		"[root] module.wordpress_service.var.elb_name" -> "[root] module.elb.output.elb_name"
		"[root] module.wordpress_service.var.iam_role_arn" -> "[root] module.ecs_cluster.output.ecs_service_role_arn"
		"[root] module.wordpress_service.var.service_repository_url" -> "[root] module.ecs_registry.output.url"
		"[root] module.wordpress_service.var.wordpress_db_host" -> "[root] module.wordpress_rds.output.db_instance_address"
		"[root] output.ecr_repository" -> "[root] module.ecs_registry.output.url"
		"[root] output.elb_dns" -> "[root] module.elb.output.elb_dns_name"
		"[root] provider.aws (close)" -> "[root] module.ecs_cluster.module.ecs_instances.aws_autoscaling_group.ecs_cluster"
		"[root] provider.aws (close)" -> "[root] module.ecs_cluster.module.efs.aws_efs_mount_target.main"
		"[root] provider.aws (close)" -> "[root] module.ecs_cluster.module.iam_ecs_instances_role_policy.aws_iam_role_policy.main"
		"[root] provider.aws (close)" -> "[root] module.ecs_cluster.module.iam_ecs_services_role_policy.aws_iam_role_policy.main"
		"[root] provider.aws (close)" -> "[root] module.private_subnet_az1.aws_route_table_association.route_table_association"
		"[root] provider.aws (close)" -> "[root] module.private_subnet_az1.aws_route_table_association.route_table_association_main_gateway"
		"[root] provider.aws (close)" -> "[root] module.private_subnet_az2.aws_route_table_association.route_table_association"
		"[root] provider.aws (close)" -> "[root] module.private_subnet_az2.aws_route_table_association.route_table_association_main_gateway"
		"[root] provider.aws (close)" -> "[root] module.private_subnet_az3.aws_route_table_association.route_table_association"
		"[root] provider.aws (close)" -> "[root] module.private_subnet_az3.aws_route_table_association.route_table_association_main_gateway"
		"[root] provider.aws (close)" -> "[root] module.public_subnet_az1.aws_route_table_association.route_table_association"
		"[root] provider.aws (close)" -> "[root] module.public_subnet_az1.aws_route_table_association.route_table_association_main_gateway"
		"[root] provider.aws (close)" -> "[root] module.public_subnet_az2.aws_route_table_association.route_table_association"
		"[root] provider.aws (close)" -> "[root] module.public_subnet_az2.aws_route_table_association.route_table_association_main_gateway"
		"[root] provider.aws (close)" -> "[root] module.public_subnet_az3.aws_route_table_association.route_table_association"
		"[root] provider.aws (close)" -> "[root] module.public_subnet_az3.aws_route_table_association.route_table_association_main_gateway"
		"[root] provider.aws (close)" -> "[root] module.security_group_ecs_group_egress_rule_allow_all.aws_security_group_rule.main"
		"[root] provider.aws (close)" -> "[root] module.security_group_ecs_group_rule_allow_22.aws_security_group_rule.main"
		"[root] provider.aws (close)" -> "[root] module.security_group_ecs_group_rule_allow_80.aws_security_group_rule.main"
		"[root] provider.aws (close)" -> "[root] module.security_group_efs_group_rule_allow_2049.aws_security_group_rule.main"
		"[root] provider.aws (close)" -> "[root] module.security_group_elb_group_rule_allow_80.aws_security_group_rule.main"
		"[root] provider.aws (close)" -> "[root] module.security_group_elb_group_rule_egress.aws_security_group_rule.main"
		"[root] provider.aws (close)" -> "[root] module.wordpress_service.aws_ecs_service.main"
		"[root] provider.template (close)" -> "[root] module.ecs_cluster.module.ecs_instances.data.template_file.user_data"
		"[root] provider.template (close)" -> "[root] module.wordpress_service.data.template_file.wordpress_task"
		"[root] root" -> "[root] meta.count-boundary (count boundary fixup)"
		"[root] root" -> "[root] provider.aws (close)"
		"[root] root" -> "[root] provider.template (close)"
	}
}

